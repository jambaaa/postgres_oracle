package main

import (
	"database/sql"
	"fmt"
	"log"

	_ "github.com/godror/godror"
	_ "github.com/lib/pq"
)

func main() {
	db, err := sql.Open("godror", `user="" password="" connectString=""`)
	if err != nil {
		fmt.Println("... Oracle DB Setup Failed")
		fmt.Println(err)
		return
	}

	defer db.Close()

	fmt.Println("... Opening Oracle Database Connection")
	if err = db.Ping(); err != nil {
		fmt.Println("Error connecting to the oracle database: ", err)
		return
	}
	fmt.Println("... Connected to Oracle Database")

	psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
		"password=%s dbname=%s sslmode=disable", "127.0.0.1", 5432, "root", "secret", "p2p_loan")
	db1, err := sql.Open("postgres", psqlInfo)
	if err != nil {
		panic(err)
	}
	defer db1.Close()

	err = db1.Ping()
	if err != nil {
		panic(err)
	}
	fmt.Println("... Postgres Database Successfully connected!\t")

	rows, err := db.Query(`SELECT
								MAX(aimag_code) aimag_code,
								MAX(aimag_name) aimag_name
							FROM
								gerege_core.grc_addresses
							GROUP BY
								aimag_code`)
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()

	type AimagCity struct {
		aimag_code int
		aimag_name string
	}

	var a AimagCity

	for rows.Next() {

		if err := rows.Scan(&a.aimag_code, &a.aimag_name); err != nil {
			log.Fatal(err)
		}

		sqlStatement := `INSERT INTO pp_aimag_cities(aimag_code, aimag_name) VALUES ($1, $2)`

		_, err = db1.Exec(sqlStatement, a.aimag_code, a.aimag_name)
		if err != nil {
			panic(err)
		}
		_, err = db1.Exec(`commit`)
		if err != nil {
			panic(err)
		}

		// fmt.Println(id, reg_no, phone, email, address, picture, is_xyp_sync, expire_date, issue_date, aimag_code, sum_code, bag_code, civil_id, first_name, last_name, family_name, birth_date, gender, password)
	}
	fmt.Println("Row inserted successfully!")
	if err := rows.Err(); err != nil {
		log.Fatal(err)
	}

}
